
ALGORITHM dot_product
 VAR

 BEGIN
//  for 2 vectors 
PROCEDURE dot_product(v1, v2: ARRAY_OF INTEGER, VAR scal:INTEGER)
VAR
    i:INTEGER;
BEGIN
    FOR i FROM 0 TO 1 STEP 1  DO
        scal:= scal+v1[i]*v2[i];
    END_FOR
END
ALGORITHM orthogonal_vectors
VAR
    scal:INTEGER:=0;
    i,j,n:INTEGER;
    htab:HASH_TABLE<INTEGER,ARRAY_OF INTEGER>;
    v: ARRAY_OF INTEGER;
    test: BOOLEAN:= FALSE;
BEGIN
    REPEAT
        Read(n);
    UNTIL (n<2)
    //   for n vectors 
    FOR i FROM 1 TO n STEP 1  DO
        Write("Enter the vector N°", i);
        FOR j FROM 0 TO 1 STEP 1  DO
        Read(v[j]);
        END_FOR
        htab.insert(i, v);
    END_FOR
    //  using the htab
    FOR i FROM 1 TO n-1 STEP 1  DO
        FOR j FROM i+1 TO n STEP 1  DO
            scal:=0;
            dot_product(htab.get(i), htab.get(j), scal);        
            IF (scal=0) THEN
                test=TRUE;
                BREAK;
            END_IF
        END_FOR
        IF (test) THEN
            BREAK;
        END_IF
    END_FOR
    IF (test) THEN
        Write("There are two vectors Orthogonal!");
    ELSE
        Write("All vectors are not Orthogonal!")
    END_IF
END
// Using Function
FUNCTION dot_product(v1, v2: ARRAY_OF INTEGER): INTEGER
VAR
    i, ps:INTEGER;
BEGIN
    FOR i FROM 0 TO 1 STEP 1  DO
        ps:=ps+v1[i]*v2[i];
    END_FOR
    RETURN ps;
END
ALGORITHM orthogonal_vectors
VAR
    scal:INTEGER;
    i,j,n:INTEGER;
    htab:HASH_TABLE<INTEGER,ARRAY_OF INTEGER>;
    v: ARRAY_OF INTEGER;
    test: BOOLEAN:= FALSE;
BEGIN
    REPEAT
        Read(n);
    UNTIL (n<2)
    //    using hash tab
    FOR i FROM 1 TO n STEP 1  DO
        Write("Enter the vector N°", i);
        FOR j FROM 0 TO 1 STEP 1  DO
        Read(v[j]);
        END_FOR
        htab.insert(i, v);
    END_FOR
     
    //  using the function
    FOR i FROM 1 TO n-1 STEP 1  DO
        FOR j FROM i+1 TO n STEP 1  DO
            scal:= dot_product(htab.get(i), htab.get(j));        
            IF (scal=0) THEN
                test=TRUE;
                BREAK;
            END_IF
        END_FOR
        IF (test) THEN
            BREAK;
        END_IF
    END_FOR
    IF (test) THEN
        Write("There are two vectors Orthogonal!");
    ELSE
        Write("All vectors are not Orthogonal!")
    END_IF
END